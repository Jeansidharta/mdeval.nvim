*mdeval.txt*

CONTENTS                                     *mdeval-contents*

Introduction                                 |mdeval-introduction|
Installation                                 |mdeval-installation|
Usage                                        |mdeval-usage|
Configuration                                |mdeval-configuration|

Note: Type |gO| to show the outline of contents.

==============================================================================
INTRODUCTION                                              *mdeval-introduction*

This plugin is inspired by org-mode's evaluating code blocks feature and tries
to implement its basic functionality inside Neovim.

==============================================================================
INSTALLATION                                              *mdeval-installation*

------------------------------------------------------------------------------

Via Plugin Manager~

    Take [vim-plug](https://github.com/junegunn/vim-plug) for example:
>
        Plug 'sainnhe/mdeval'
<
    You should also enable syntax highlighting inside code blocks in markdown
    using the built-in functionality. Please define a list of markdown fenced
    languages in your configuration file:
>
        let g:markdown_fenced_languages = ['python', 'cpp']
<

==============================================================================
USAGE                                                            *mdeval-usage*

------------------------------------------------------------------------------

To use this plugin, you should move cursor inside a fenced code block with
language identifier and execute the `:MdEval` command. mdeval.nvim will
capture the results of the code block execution and inserts them in the
markdown file, right after the code block.

==============================================================================
CONFIGURATION                                            *mdeval-configuration*

You can configure *mdeval.nvim* by running `mdeval.setup` function.

Here is a complete list of the available configuration options.

------------------------------------------------------------------------------
                                                   *variable_option_identifier*
variable_option_identifier~

The string that would identify an option to be replaced by an argument
in the code block

    Default value: `'$$'`
------------------------------------------------------------------------------
                                                         *require_confirmation*
require_confirmation~

If set to `true`, the plugin will ask for confirmation each time before
evaluating the code block.

    Available values: `false`, `true`
    Default value: `true`

------------------------------------------------------------------------------
                                                           *allowed_file_types*
allowed_file_types~

A list of language codes, for which this plugin will not ask for the
confirmation before evaluation.

    Default value: `{}`

E.g.
>
    allowed_file_types={'python', 'cpp'}
<
------------------------------------------------------------------------------
                                                                *tmp_build_dir*
tmp_build_dir~

The path to the directory that will be used to store temporary source files
and compiled artifacts.

    Default value: `/tmp/mdeval/`

------------------------------------------------------------------------------
                                                                 *exec_timeout*
exec_timeout~

Timeout for execution of the code block in seconds. If set -1, the timeout
will be disabled.

    Default value: `*-1*`

------------------------------------------------------------------------------
                                                                *results_label*
results_label~

The string inserted before the code evaluation output.

    Default value: `*Results:*`

------------------------------------------------------------------------------
                                                                 *eval_options*
eval_options~

A table with evaluation options for the code blocks for different languages.
Supported table keys:
- `command`
  A command to run the interpreter or compiler.
- `language_code`
  A code of the language in the markdown code block.
- `exec_type`
  Supported values: "compiled" and "interpreted".
- `extension`
  File extension for the temporary files generated by the plugin. Some
  languages require the correct extension to compile the file.
- `default_header`
  The lines of code that will be added at the beginning of each code block
  before execution. For example, you can use this to add some imports.
- `default_footer`
  The lines of code that will be added at the end of each code block
  before execution.

Example configuration:
>
  eval_options = {
    -- Set custom configuration for C++
    cpp = {
      command = {"clang++", "-std=c++20", "-O0"},
      default_header = [[
    #include <iostream>
    #include <vector>
    using namespace std;
      ]]
    },
    -- Add new configuration for Racket
    racket = {
      command = {"racket"},
      language_code = "racket",
      exec_type = "interpreted",
      extension = "rkt",
    },
  }
<
------------------------------------------------------------------------------

==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:et:sw=4:fen:fdm=marker:fmr={{{,}}}:

